int32_t island_size;
get_argument(arguments, "--island_size", true, island_size);
int32_t number_islands;
get_argument(arguments, "--number_islands", true, number_islands);
int32_t max_genomes;
get_argument(arguments, "--max_genomes", true, max_genomes);
int32_t extinction_event_generation_number = 0;
get_argument(arguments, "--extinction_event_generation_number", false, extinction_event_generation_number);
int32_t islands_to_exterminate = 0;
get_argument(arguments, "--islands_to_exterminate", false, islands_to_exterminate);
string island_ranking_method = "";
get_argument(arguments, "--island_ranking_method", false, island_ranking_method);
string repopulation_method = "";
get_argument(arguments, "--repopulation_method", false, repopulation_method);
int32_t num_mutations = 1;
get_argument(arguments, "--num_mutations", false, num_mutations);
double mutation_rate = 0.70, intra_island_co_rate = 0.20, inter_island_co_rate = 0.10;

bool repeat_extinction = argument_exists(arguments, "--repeat_extinction");
    string transfer_learning_version = "";
    bool transfer_learning = get_argument(arguments, "--transfer_learning_version", false, transfer_learning_version);
    int32_t seed_stirs = 0;
    get_argument(arguments, "--seed_stirs", false, seed_stirs);
    bool start_filled = argument_exists(arguments, "--start_filled");
    bool tl_epigenetic_weights = argument_exists(arguments, "--tl_epigenetic_weights");

IslandSpeciationStrategy* island_strategy = new IslandSpeciationStrategy(
        number_islands, island_size, mutation_rate, intra_island_co_rate, inter_island_co_rate, seed_genome,
        island_ranking_method, repopulation_method, extinction_event_generation_number, num_mutations,
        islands_to_exterminate, max_genomes, repeat_extinction, start_filled, transfer_learning,
        transfer_learning_version, seed_stirs, tl_epigenetic_weights
    );


IslandSpeciationStrategy::IslandSpeciationStrategy(
    int32_t _number_of_islands, int32_t _max_island_size, double _mutation_rate, double _intra_island_crossover_rate,
    double _inter_island_crossover_rate, RNN_Genome* _seed_genome, string _island_ranking_method,
    string _repopulation_method, int32_t _extinction_event_generation_number, int32_t _num_mutations,
    int32_t _islands_to_exterminate, int32_t _max_genomes, bool _repeat_extinction, bool _start_filled,
    bool _transfer_learning, string _transfer_learning_version, int32_t _seed_stirs, bool _tl_epigenetic_weights
) : generation_island(0),
      number_of_islands(_number_of_islands),
      max_island_size(_max_island_size),
      mutation_rate(_mutation_rate),
      intra_island_crossover_rate(_intra_island_crossover_rate),
      inter_island_crossover_rate(_inter_island_crossover_rate),
      generated_genomes(0),
      evaluated_genomes(0),
      seed_genome(_seed_genome),
      island_ranking_method(_island_ranking_method),
      repopulation_method(_repopulation_method),
      extinction_event_generation_number(_extinction_event_generation_number),
      num_mutations(_num_mutations),
      islands_to_exterminate(_islands_to_exterminate),
      max_genomes(_max_genomes),
      repeat_extinction(_repeat_extinction),
      start_filled(_start_filled),
      transfer_learning(_transfer_learning),
      transfer_learning_version(_transfer_learning_version),
      seed_stirs(_seed_stirs),
      tl_epigenetic_weights(_tl_epigenetic_weights)


GenomeProperty* genome_property = new GenomeProperty();
    genome_property->generate_genome_property_from_arguments(arguments);
    genome_property->get_time_series_parameters(time_series_sets);

SpeciationStrategy* speciation_strategy = generate_speciation_strategy_from_arguments(arguments, seed_genome);

island_size(_island_size),
      number_islands(_number_islands),
      max_genomes(_max_genomes),
      speciation_strategy(_speciation_strategy),
      weight_rules(_weight_rules),
      genome_property(_genome_property),
      output_directory(_output_directory),
      save_genome_option(_save_genome_option) {
    total_bp_epochs = 0;
    edge_innovation_count = 0;
    node_innovation_count = 0;
    generate_op_log = false;

WeightType weight_initialize = weight_rules->get_weight_initialize_method();
    WeightType weight_inheritance = weight_rules->get_weight_inheritance_method();
    WeightType mutated_component_weight = weight_rules->get_mutated_components_weight_method();


void EXAMM::set_evolution_hyper_parameters() {
more_fit_crossover_rate = 1.00;
    less_fit_crossover_rate = 0.50;

    clone_rate = 1.0;
    add_edge_rate = 1.0;
    add_recurrent_edge_rate = 1.0;
    enable_edge_rate = 1.0;
    disable_edge_rate = 1.0;
    split_edge_rate = 0.0;

    bool node_ops = true;
    if (node_ops) {
        add_node_rate = 1.0;
        enable_node_rate = 1.0;
        // disable_node_rate = 3.0;
        disable_node_rate = 1.0;
        split_node_rate = 1.0;
        merge_node_rate = 1.0;

    } else {
        add_node_rate = 0.0;
        enable_node_rate = 0.0;
        disable_node_rate = 0.0;
        split_node_rate = 0.0;
        merge_node_rate = 0.0;
    }

double total = clone_rate + add_edge_rate + add_recurrent_edge_rate + enable_edge_rate + disable_edge_rate
                   + split_edge_rate + add_node_rate + enable_node_rate + disable_node_rate + split_node_rate
                   + merge_node_rate;

clone_rate
number_mutations
add_edge_rate





















